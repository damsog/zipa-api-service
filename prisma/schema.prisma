// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider             = "prisma-client-py"
    recursive_type_depth = 5
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model Race {
    id          String      @id @default(cuid())
    name        String
    description String      @db.Text
    identity    String?     @db.Text
    aspects     String?     @db.Text
    created_at  DateTime    @default(now())
    updated_at  DateTime    @updatedAt
    traits      RaceTrait[]
    Unit        Unit[]
}

model UnitSpecialization {
    id                   String                    @id @default(cuid())
    name                 String
    description          String                    @db.Text
    vitality             Float
    strength             Float
    dexterity            Float
    mind                 Float
    faith                Float
    armor                Float
    magic_armor          Float
    essence              Float
    agility              Float
    hit_chance           Float
    evasion              Float
    hit_rate             Float
    movement             Float
    weapon_proficiencies String                    @db.Text
    tier                 Int
    skills               UnitSpecializationSkill[]
    items                UnitSpecializationItem[]
    traits               UnitSpecializationTrait[]
    created_at           DateTime                  @default(now())
    updated_at           DateTime                  @updatedAt
    skills_summon        SkillSummon[]
    Unit                 Unit[]
}

model SkillType {
    id          String              @id @default(cuid())
    name        String
    description String              @db.Text
    skills      AssignedSkillType[]
    created_at  DateTime            @default(now())
    updated_at  DateTime            @updatedAt
}

model Skill {
    id                   String                    @id @default(cuid())
    name                 String
    description          String                    @db.Text
    conditions           String?
    physical_damage      String?
    magical_damage       String?
    healing              String?
    vitality_recovery    String?
    essence_recovery     String?
    range                String?
    area_of_effect       String?
    essence_cost         String?
    vitality_cost        String?
    cooldown             String?                   @default("0")
    channeled            String?                   @default("")
    projectile           Boolean                   @default(false)
    target               Target                    @default(ENEMY)
    skill_on             SkillOn                   @default(INSTANT)
    skill_types          AssignedSkillType[]
    effects              SkillEffect[]
    items                ItemSkill[]
    unit_specializations UnitSpecializationSkill[]
    summons              SkillSummon[]
    created_at           DateTime                  @default(now())
    updated_at           DateTime                  @updatedAt
}

enum SkillOn {
    INSTANT
    OVER_TIME
    DURING_CHANNEL
    AFTER_CHANNEL
    DELAYED
}

enum Target {
    NONE
    SELF
    ALLY
    ALLY_SUMMON
    ALLY_AROUND
    ALLY_EXCEPT_SELF
    ENEMY
    ENEMY_SUMMON
    ENEMY_AROUND
    ANY
    ANY_AROUND
    ANY_EXCEPT_SELF
    ANY_SUMMON
    POINT
    POINT_ENEMY
    POINT_ALLY
    AREA
    AREA_ENEMY
    AREA_ALLY
}

model Trait {
    id                   String                    @id @default(cuid())
    name                 String
    description          String                    @db.Text
    effects              TraitEffect[]
    unit_specializations UnitSpecializationTrait[]
    created_at           DateTime                  @default(now())
    updated_at           DateTime                  @updatedAt
    RaceTrait            RaceTrait[]
}

model Item {
    id                    String                   @id @default(cuid())
    name                  String
    description           String                   @db.Text
    conditions            String?
    rarity                ItemRarity               @default(COMMON)
    is_weapon             Boolean                  @default(false)
    object_type           ObjectType               @default(OTHER)
    magic_effectiveness   String?
    physical_damage       String?
    magical_damage        String?
    healing               String?
    armor_piercing        String?
    spell_piercing        String?
    vitality_recovery     String?
    essence_recovery      String?
    vitality              String?
    range                 String?                  @default("1")
    damage                String?
    armor                 String?
    magic_armor           String?
    essence               String?
    agility               String?
    hit_chance            String?
    evasion               String?
    hit_rate              String?
    movement              String?
    ammo                  String?
    shield                String?
    dexterity_requirement Float                    @default(0)
    strength_requirement  Float                    @default(0)
    mind_requirement      Float                    @default(0)
    faith_requirement     Float                    @default(0)
    weight                Float                    @default(0)
    skills                ItemSkill[]
    unit_specializations  UnitSpecializationItem[]
    created_at            DateTime                 @default(now())
    updated_at            DateTime                 @updatedAt
    UnitItem              UnitItem[]
}

enum ItemRarity {
    COMMON
    UNCOMMON
    RARE
    EPIC
    LEGENDARY
}

model Effect {
    id                        String        @id @default(cuid())
    name                      String
    description               String        @db.Text
    conditions                String?
    magic_effectiveness       String?
    physical_damage           String?
    magical_damage            String?
    healing                   String?
    armor_piercing            String?
    spell_piercing            String?
    vitality                  String?
    range                     String?
    damage                    String?
    armor                     String?
    magic_armor               String?
    essence                   String?
    agility                   String?
    hit_chance                String?
    evasion                   String?
    hit_rate                  String?
    movement                  String?
    ammo                      String?
    shield                    String?
    barrier                   String?       @default("0")
    instant_vitality_recovery String?
    instant_essence_recovery  String?
    instant_physical_damage   String?
    instant_magical_damage    String?
    instant_target            Target        @default(SELF)
    instant_area_of_effect    String?
    instant_conditions        String?
    max_stack                 Int?          @default(1)
    skills                    SkillEffect[]
    traits                    TraitEffect[]
    created_at                DateTime      @default(now())
    updated_at                DateTime      @updatedAt
}

model AssignedSkillType {
    id            String    @id @default(cuid())
    skill         Skill     @relation(fields: [skill_id], references: [id], onDelete: Cascade)
    skill_id      String
    skill_type    SkillType @relation(fields: [skill_type_id], references: [id], onDelete: Cascade)
    skill_type_id String
    created_at    DateTime  @default(now())
    updated_at    DateTime  @updatedAt
}

model UnitSpecializationSkill {
    id                     String             @id @default(cuid())
    unit_specialization    UnitSpecialization @relation(fields: [unit_specialization_id], references: [id], onDelete: Cascade)
    unit_specialization_id String
    skill                  Skill              @relation(fields: [skill_id], references: [id], onDelete: Cascade)
    skill_id               String
    created_at             DateTime           @default(now())
    updated_at             DateTime           @updatedAt
}

model UnitSpecializationItem {
    id                     String             @id @default(cuid())
    unit_specialization    UnitSpecialization @relation(fields: [unit_specialization_id], references: [id], onDelete: Cascade)
    unit_specialization_id String
    item                   Item               @relation(fields: [item_id], references: [id], onDelete: Cascade)
    item_id                String
    quantity               Float
    created_at             DateTime           @default(now())
    updated_at             DateTime           @updatedAt
}

model ItemSkill {
    id            String   @id @default(cuid())
    item          Item     @relation(fields: [item_id], references: [id], onDelete: Cascade)
    item_id       String
    skill         Skill    @relation(fields: [skill_id], references: [id], onDelete: Cascade)
    skill_id      String
    essence_cost  String?  @default("0")
    vitality_cost String?  @default("0")
    cooldown      String?  @default("0")
    created_at    DateTime @default(now())
    updated_at    DateTime @updatedAt
}

model UnitSpecializationTrait {
    id                     String             @id @default(cuid())
    unit_specialization    UnitSpecialization @relation(fields: [unit_specialization_id], references: [id], onDelete: Cascade)
    unit_specialization_id String
    trait                  Trait              @relation(fields: [trait_id], references: [id], onDelete: Cascade)
    trait_id               String
    conditions             String?
    created_at             DateTime           @default(now())
    updated_at             DateTime           @updatedAt
}

model SkillEffect {
    id         String   @id @default(cuid())
    skill      Skill    @relation(fields: [skill_id], references: [id], onDelete: Cascade)
    skill_id   String
    effect     Effect   @relation(fields: [effect_id], references: [id], onDelete: Cascade)
    effect_id  String
    conditions String?
    duration   String?  @default("1")
    created_at DateTime @default(now())
    updated_at DateTime @updatedAt
}

model TraitEffect {
    id         String   @id @default(cuid())
    trait      Trait    @relation(fields: [trait_id], references: [id], onDelete: Cascade)
    trait_id   String
    effect     Effect   @relation(fields: [effect_id], references: [id], onDelete: Cascade)
    effect_id  String
    conditions String?
    duration   String?  @default("1")
    cooldown   String?  @default("0")
    created_at DateTime @default(now())
    updated_at DateTime @updatedAt
}

model SkillSummon {
    id                     String             @id @default(cuid())
    skill                  Skill              @relation(fields: [skill_id], references: [id], onDelete: Cascade)
    skill_id               String
    unit_specialization    UnitSpecialization @relation(fields: [unit_specialization_id], references: [id], onDelete: Cascade)
    unit_specialization_id String
    conditions             String?
    duration               String?            @default("1")
    created_at             DateTime           @default(now())
    updated_at             DateTime           @updatedAt
}

enum ObjectType {
    CURVED_SWORD_1H
    CURVED_SWORD_2H
    STRAIGHT_SWORD_1H
    STRAIGHT_SWORD_2H
    AXE_1H
    AXE_2H
    HAMMER_1H
    HAMMER_2H
    SPEAR_1H
    SPEAR_2H
    JAVELIN_1H
    STAFF_1H
    STAFF_2H
    BOW_2H
    CROSSBOW_2H
    DAGGER_1H
    SMALL_SHIELD
    MEDIUM_SHIELD
    LARGE_SHIELD
    LIGHT_ARMOR
    MEDIUM_ARMOR
    HEAVY_ARMOR
    AMULET
    TRINKET
    RING
    CONSUMABLE
    MATERIAL
    KEY
    OTHER
}

model RaceTrait {
    id         String   @id @default(cuid())
    race       Race     @relation(fields: [race_id], references: [id], onDelete: Cascade)
    race_id    String
    trait      Trait    @relation(fields: [trait_id], references: [id], onDelete: Cascade)
    trait_id   String
    conditions String?
    created_at DateTime @default(now())
    updated_at DateTime @updatedAt
}

// User Management for NextAuth.js
// ========================================
model User {
    id            String    @id @default(cuid())
    name          String?   @unique
    email         String    @unique
    emailVerified DateTime?
    password      String?
    firstName     String?
    lastName      String?
    image         String?
    apiKey        String?   @unique
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt
    accounts      Account[]
    sessions      Session[]
    Unit          Unit[]
    Faction       Faction[]
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// ========================================
model Unit {
    id                String             @id @default(cuid())
    name              String
    title             String?
    prefix_title      String?
    description       String?            @db.Text
    base_vitality     Float
    base_strength     Float
    base_dexterity    Float
    base_mind         Float
    base_faith        Float
    base_essence      Float
    base_agility      Float
    base_hit_chance   Float
    base_evasion      Float
    race              Race               @relation(fields: [race_id], references: [id], onDelete: Cascade)
    race_id           String
    specialization    UnitSpecialization @relation(fields: [specialization_id], references: [id], onDelete: Cascade)
    specialization_id String
    skill_picks       String?
    ascended          Boolean            @default(false)
    ascended_params   String?
    rank              Int                @default(1)
    items             UnitItem[]
    user              User               @relation(fields: [user_id], references: [id], onDelete: Cascade)
    user_id           String
    created_at        DateTime           @default(now())
    updated_at        DateTime           @updatedAt
    factions          FactionMember[]
}

model UnitItem {
    id         String   @id @default(cuid())
    unit       Unit     @relation(fields: [unit_id], references: [id], onDelete: Cascade)
    unit_id    String
    item       Item     @relation(fields: [item_id], references: [id], onDelete: Cascade)
    item_id    String
    quantity   Float
    created_at DateTime @default(now())
    updated_at DateTime @updatedAt
}

model Faction {
    id                  String            @id @default(cuid())
    name                String
    description         String?           @db.Text
    holdings            String?
    user                User              @relation(fields: [user_id], references: [id], onDelete: Cascade)
    user_id             String
    members             FactionMember[]
    faction_ranks       FactionRank[]
    factions_relations  FactionRelation[] @relation("faction")
    factions_relations2 FactionRelation[] @relation("faction2")
    created_at          DateTime          @default(now())
    updated_at          DateTime          @updatedAt
}

model FactionRank {
    id           String          @id @default(cuid())
    name         String
    description  String?         @db.Text
    rank         Int             @default(1)
    faction      Faction         @relation(fields: [faction_id], references: [id], onDelete: Cascade)
    faction_id   String
    created_at   DateTime        @default(now())
    updated_at   DateTime        @updatedAt
    ranked_units FactionMember[]
}

model FactionMember {
    id              String      @id @default(cuid())
    unit            Unit        @relation(fields: [unit_id], references: [id], onDelete: Cascade)
    unit_id         String
    faction         Faction     @relation(fields: [faction_id], references: [id], onDelete: Cascade)
    faction_id      String
    faction_rank    FactionRank @relation(fields: [faction_rank_id], references: [id], onDelete: Cascade)
    faction_rank_id String
    created_at      DateTime    @default(now())
    updated_at      DateTime    @updatedAt
}

enum FactionRelationType {
    VASSAL
    SUBJECT
    ALLY
    WAR
}

model FactionRelation {
    id          String              @id @default(cuid())
    faction     Faction             @relation("faction", fields: [faction_id], references: [id], onDelete: Cascade)
    faction_id  String
    faction2    Faction             @relation("faction2", fields: [faction2_id], references: [id], onDelete: Cascade)
    faction2_id String
    type        FactionRelationType
    created_at  DateTime            @default(now())
    updated_at  DateTime            @updatedAt
}
