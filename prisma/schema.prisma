// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider             = "prisma-client-py"
    recursive_type_depth = 5
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model Faction {
    id          String        @id @default(cuid())
    name        String
    description String
    identity    String?
    aspects     String?
    created_at  DateTime      @default(now())
    updated_at  DateTime      @updatedAt
    units       FactionUnit[]
}

model Unit {
    id            String        @id @default(cuid())
    name          String
    description   String
    vitality      Float
    range         Float
    damage        Float
    armor         Float
    magic_armor   Float
    essence       Float
    agility       Float
    hit_chance    Float
    evasion       Float
    hit_rate      Float
    movement      Float
    ammo          Float
    shield        Float
    tier          Int
    skills        UnitSkill[]
    items         UnitItem[]
    traits        UnitTrait[]
    created_at    DateTime      @default(now())
    updated_at    DateTime      @updatedAt
    factions      FactionUnit[]
    skills_summon SkillSummon[]
}

model FactionUnit {
    id         String   @id @default(cuid())
    faction    Faction  @relation(fields: [faction_id], references: [id], onDelete: Cascade)
    faction_id String
    unit       Unit     @relation(fields: [unit_id], references: [id], onDelete: Cascade)
    unit_id    String
    created_at DateTime @default(now())
    updated_at DateTime @updatedAt
}

model SkillType {
    id          String              @id @default(cuid())
    name        String
    description String
    skills      AssignedSkillType[]
    created_at  DateTime            @default(now())
    updated_at  DateTime            @updatedAt
}

model Skill {
    id                String              @id @default(cuid())
    name              String
    description       String
    conditions        String?
    physical_damage   String?
    magical_damage    String?
    healing           String?
    vitality_recovery String?
    essence_recovery  String?
    range             String?
    area_of_effect    String?
    essence_cost      String?
    vitality_cost     String?
    cooldown          Float               @default(0)
    channeled         Boolean             @default(false)
    target            Target              @default(ENEMY)
    skill_on          SkillOn             @default(INSTANT)
    skill_types       AssignedSkillType[]
    effects           SkillEffect[]
    items             ItemSkill[]
    units             UnitSkill[]
    summons           SkillSummon[]
    created_at        DateTime            @default(now())
    updated_at        DateTime            @updatedAt
}

enum SkillOn {
    INSTANT
    OVER_TIME
    DURING_CHANNEL
    AFTER_CHANNEL
    DELAYED
}

enum Target {
    NONE
    SELF
    ALLY
    ALLY_SUMMON
    ALLY_AROUND
    ALLY_EXCEPT_SELF
    ENEMY
    ENEMY_SUMMON
    ENEMY_AROUND
    ANY
    ANY_AROUND
    ANY_EXCEPT_SELF
    ANY_SUMMON
    POINT
    POINT_ENEMY
    POINT_ALLY
    AREA
    AREA_ENEMY
    AREA_ALLY
}

model Trait {
    id          String        @id @default(cuid())
    name        String
    description String
    conditions  String?
    cooldown    Float         @default(0)
    effects     TraitEffect[]
    units       UnitTrait[]
    created_at  DateTime      @default(now())
    updated_at  DateTime      @updatedAt
}

model Item {
    id                  String      @id @default(cuid())
    name                String
    description         String
    conditions          String?
    rarity              ItemRarity  @default(COMMON)
    magic_effectiveness String?
    physical_damage     String?
    magical_damage      String?
    healing             String?
    vitality_recovery   String?
    essence_recovery    String?
    vitality            String?
    range               String?
    damage              String?
    armor               String?
    magic_armor         String?
    essence             String?
    agility             String?
    hit_chance          String?
    evasion             String?
    hit_rate            String?
    movement            String?
    ammo                String?
    shield              String?
    skills              ItemSkill[]
    units               UnitItem[]
    created_at          DateTime    @default(now())
    updated_at          DateTime    @updatedAt
}

enum ItemRarity {
    COMMON
    UNCOMMON
    RARE
    EPIC
    LEGENDARY
}

model Effect {
    id                  String        @id @default(cuid())
    name                String
    description         String
    conditions          String?
    magic_effectiveness String?
    physical_damage     String?
    magical_damage      String?
    healing             String?
    vitality_recovery   String?
    essence_recovery    String?
    vitality            String?
    range               String?
    damage              String?
    armor               String?
    magic_armor         String?
    essence             String?
    agility             String?
    hit_chance          String?
    evasion             String?
    hit_rate            String?
    movement            String?
    ammo                String?
    shield              String?
    barrier             Float?
    max_stack           Int?          @default(1)
    skills              SkillEffect[]
    traits              TraitEffect[]
    created_at          DateTime      @default(now())
    updated_at          DateTime      @updatedAt
}

model AssignedSkillType {
    id            String    @id @default(cuid())
    skill         Skill     @relation(fields: [skill_id], references: [id], onDelete: Cascade)
    skill_id      String
    skill_type    SkillType @relation(fields: [skill_type_id], references: [id], onDelete: Cascade)
    skill_type_id String
    created_at    DateTime  @default(now())
    updated_at    DateTime  @updatedAt
}

model UnitSkill {
    id         String   @id @default(cuid())
    unit       Unit     @relation(fields: [unit_id], references: [id], onDelete: Cascade)
    unit_id    String
    skill      Skill    @relation(fields: [skill_id], references: [id], onDelete: Cascade)
    skill_id   String
    created_at DateTime @default(now())
    updated_at DateTime @updatedAt
}

model UnitItem {
    id         String   @id @default(cuid())
    unit       Unit     @relation(fields: [unit_id], references: [id], onDelete: Cascade)
    unit_id    String
    item       Item     @relation(fields: [item_id], references: [id], onDelete: Cascade)
    item_id    String
    quantity   Float
    created_at DateTime @default(now())
    updated_at DateTime @updatedAt
}

model ItemSkill {
    id           String   @id @default(cuid())
    item         Item     @relation(fields: [item_id], references: [id], onDelete: Cascade)
    item_id      String
    skill        Skill    @relation(fields: [skill_id], references: [id], onDelete: Cascade)
    skill_id     String
    essence_cost Float
    cooldown     Float    @default(0)
    created_at   DateTime @default(now())
    updated_at   DateTime @updatedAt
}

model UnitTrait {
    id         String   @id @default(cuid())
    unit       Unit     @relation(fields: [unit_id], references: [id], onDelete: Cascade)
    unit_id    String
    trait      Trait    @relation(fields: [trait_id], references: [id], onDelete: Cascade)
    trait_id   String
    created_at DateTime @default(now())
    updated_at DateTime @updatedAt
}

model SkillEffect {
    id         String   @id @default(cuid())
    skill      Skill    @relation(fields: [skill_id], references: [id], onDelete: Cascade)
    skill_id   String
    effect     Effect   @relation(fields: [effect_id], references: [id], onDelete: Cascade)
    effect_id  String
    duration   Float
    created_at DateTime @default(now())
    updated_at DateTime @updatedAt
}

model TraitEffect {
    id         String   @id @default(cuid())
    trait      Trait    @relation(fields: [trait_id], references: [id], onDelete: Cascade)
    trait_id   String
    effect     Effect   @relation(fields: [effect_id], references: [id], onDelete: Cascade)
    effect_id  String
    created_at DateTime @default(now())
    updated_at DateTime @updatedAt
}

model SkillSummon {
    id         String   @id @default(cuid())
    skill      Skill    @relation(fields: [skill_id], references: [id], onDelete: Cascade)
    skill_id   String
    unit       Unit     @relation(fields: [unit_id], references: [id], onDelete: Cascade)
    unit_id    String
    duration   Float
    created_at DateTime @default(now())
    updated_at DateTime @updatedAt
}
